#labels Featured
= Introduction =

The FirePHP extension uses the [http://www.getfirebug.com/ Firebug] extension as its base and adds a new panel called "FirePHP" to it.

The primary motivations for extending Firebug instead of publishing an independent extension without the requirement of needing Firebug installed are:

 * Firebug provides 95% of all functionality required to track and manage browser requests and contexts as needed by FirePHP
 * Firebug provides a large base of library functions
 * The user interface of Firebug is already used by many developers and FirePHP will attempt to stay as consistent with the existing UI as possible to minimize the adoption and learning curves of FirePHP

This tutorial focuses on how FirePHP is able to extend Firebug in an effort to help you make your own additions to Firebug.

= Concepts and Quick Recap =

The [http://developer.mozilla.org/en/docs/Gecko Gecko] engine behind Firefox is designed to allow you to build user interfaces using an XML-based language called [http://developer.mozilla.org/en/docs/XUL XUL]. One primary objective of this language is to allow you to [http://developer.mozilla.org/en/docs/XUL_Overlays overlay] new components by essentially inserting them into existing XUL applications like Firefox. [https://addons.mozilla.org/firefox/extensions/ Firefox extensions] make heavy use of overlays to add functionality to Firefox without needing to modify the Firefox code.

Similarly FirePHP uses overlays to add functionality to Firebug without needing to modify Firebug itself.

= Example =

The following example illustrates how to add a new panel called "Test Panel" to Firebug.

You can download and install this extension from:
http://firephp.googlecode.com/files/FirebugTestExtension-0.0.1.xpi

NOTE: When you are done playing with this extension and want to remove it again, before you remove it make sure you select one of the default Firebug tabs! See the Caution section below for more information.

== Assumptions and Requirements ==

To keep this tutorial brief I am assuming you have some basic knowledge on how to build a Firefox extension and you have your development environment already setup. If you need more information on these topics you can visit the [http://developer.mozilla.org/en/docs/Extensions Mozilla Developer Center].

The extension for this example is called "FirebugTestExtension" and you can change any references to this name if you are trying this out with your own extension.

When developing additions to Firebug it is very useful to have the Firebug source available. I suggest that you extract the Firebug XPI package and load it into your development environment just like your own extensions. This way you can add debug code to Firebug during development and can look through all the Firebug code to help understand what happens behind the scenes.

You should be familiar with using Firebug.

= The Overlay Definition =

First we need to tell Gecko that we want to add some UI elements to Firebug. This is done in the *chrome.manifest* file.
{{{
overlay chrome://firebug/content/firebugOverlay.xul  chrome://firebugtestextension/content/firebugOverlay.xul 
}}}
This means we want to overlay the content of _chrome://firebugtestextension/content/firebugOverlay.xul_ on top of _chrome://firebug/content/firebugOverlay.xul_ which is a specific Firebug file.

Gecko will create a new JavaScript context that we can load our own XUL and JavaScript code into.

Next we define the XUL code used to insert new UI components. The following code will add two buttons to a specific location in the Firebug UI. The buttons will not be visible by default but will be made visible by code we are going to add. These are the buttons that show above the Firebug panel tabs next to the Firebug logo and "Inspect" button.

{{{
<?xml version="1.0"?> 
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"> 
    <script type="application/x-javascript"
            src="chrome://FirebugTestExtension/content/FirebugPanel.js"/> 
    <commandset id="mainCommandSet"> 
        <command id="cmd_button1FirebugTestExtension" oncommand="Firebug.FirebugTestExtension.button1()"/> 
        <command id="cmd_button2FirebugTestExtension" oncommand="Firebug.FirebugTestExtension.button2()"/> 
    </commandset> 
    <toolbar id="fbToolbar" align="center"> 
        <hbox id="fbToolbarInner" insertbefore="fbDetachButton" flex="1" align="center"> 
            <hbox id="fbFirebugTestExtensionButtons" insertafter="fbNetButtons"> 
                <toolbarbutton label="Button 1" class="toolbar-text-button" 
                               tooltiptext="Button 1" command="cmd_button1FirebugTestExtension"/> 
                <toolbarbutton label="Button 2" class="toolbar-text-button" 
                               tooltiptext="Button 2" command="cmd_button2FirebugTestExtension"/> 
            </hbox> 
        </hbox> 
    </toolbar> 
</overlay> 
}}}

= The JavaScript Code =

In the XUL file we are including a JavaScript file from _chrome://firebugtestextension/content/FirebugPanel.js_. This file has the following content.
{{{
FBL.ns(function() { with (FBL) { 
Firebug.FirebugTestExtension = extend(Firebug.Module, 
{ 
    showPanel: function(browser, panel) 
    { 
        var isFirebugTestExtension = panel && panel.name == "FirebugTestExtension"; 
        var FirebugTestExtensionButtons = browser.chrome.$("fbFirebugTestExtensionButtons"); 
        collapse(FirebugTestExtensionButtons, !isFirebugTestExtension); 
    }, 
    button1: function() 
    { 
      FirebugContext.getPanel("FirebugTestExtension").printLine('Clicked Button 1'); 
    }, 
    button2: function() 
    { 
      FirebugContext.getPanel("FirebugTestExtension").printLine('Clicked Button 2'); 
    } 
}); 
function FirebugTestExtensionPanel() {} 
FirebugTestExtensionPanel.prototype = extend(Firebug.Panel, 
{ 
    name: "FirebugTestExtension", 
    title: "Test Panel", 
    searchable: false, 
    editable: false,

    printLine: function(message) {
      var elt = this.document.createElement("p");
      elt.innerHTML = message;
      this.panelNode.appendChild(elt);
    }
}); 
Firebug.registerModule(Firebug.FirebugTestExtension); 
Firebug.registerPanel(FirebugTestExtensionPanel); 
}});
}}}

We create two new objects. A _Firebug.Module_ and a _Firebug.Panel_. The Module is designed to do all the heavy lifting of your new logic while the Panel is designed to primarily concern itself with the display of your new features in the "panel" which is the large white area underneath the tabs in the Firebug extension.

The _Firebug.FirebugTestExtension.showPanel()_ method is called whenever the tab for our new panel is selected. Here we now tell Firebug to display the buttons we added in the XUL overlay by referencing them via the _fbFirebugTestExtensionButtons_ id.

We also implemented two methods to catch events coming from the two XUL commands we setup and connected with the buttons in the XUL file. When the events fire (you click on the buttons) we obtain a reference to the FirebugTestExtension panel and and call the _printLine()_ method.

In _FirebugTestExtensionPanel.printLine()_ you can see that we create a new paragraph element and append it to _this.panelNode_ which is a reference to a DIV tag that Firebug automatically adds as the top level element of the document that resides in the white bottom panel.

At the bottom of our JavaScript file we register the Module and Panel with Firebug. This will cause Firebug to create the new tab in its UI when it initializes.

== A note about Firebug ==

Firebug is designed to help developers debug and build web-applications and more specifically help in working with a specific page or set of pages. Firebug will by design create a new Panel context for each new top-level page requested. This is why the content of the panel (which you can see after you have clicked the buttons a few times) is removed when you navigate to a new URL or open a new browser tab. When you return to a previous tab the content of the panel will be returned. It is important that you keep this logic in mind when you build your own additions. Pages loaded into framesets or iframe elements contained within the top-level document will not create a new context for Firebug and you are able to capture these events and update your Panel.

A helpful strategy is to use the _Firebug.Module_ to gather and store information about the requests that are occurring and use the _Firebug.Panel_ to access to the Module and obtain relevant information given the current Panel context (based on the currently displayed page) for the purpose of rendering the UI. The way this interaction should ideally work is outside the scope of this tutorial. You may want to review the FirePHP code at http://firephp.googlecode.com/svn/trunk/FirefoxExtension/chrome/content/firephp/FirebugPanel.js and look at the _net.js_ file or any other panel files in the Firebug extension. There is also some information about the internals of Firebug available at http://developer.mozilla.org/en/docs/FirebugInternals.

== Caution! ==

When you play with adding your own additions to Firebug make sure that you always exit the browser after having selected one of the default tabs that Firebug offers. If you have your new tab selected, you close Firefox and remove your extension, the next time Firebug starts no panels will be visible at all. This is because the _extensions.firebug.defaultPanelName_ user preference will be set to a panel name that Firebug no longer knows of and it will fail silently.
If this happens to you, close Firefox, open the prefs.js file from your Firefox profile and delete the mentioned preference, start Firefox and everything should work again. You can always of course add your extension back in, start Firefox select a different panel and then remove your extension again.

== Summary ==

The above code succeeds in extending Firebug because Gecko within Firefox will initialize Firebug first, then based on our overlay directive call our JavaScript code to register the new module and panel and then initialize the UI for the Firebug extension.

= Comments & Questions =

If you have any corrections, comments or questions to the above information please let me know. You can reach me at christoph@christophdorn.com
